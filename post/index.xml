<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 개발노트</title>
    <link>https://sanc93.github.io/post/</link>
    <description>Recent content in Posts on 개발노트</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2023, Sanghun Kim; all rights reserved.</copyright>
    <lastBuildDate>Tue, 22 Aug 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sanc93.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>TIL 24</title>
      <link>https://sanc93.github.io/post/record/2023-08-22-til/</link>
      <pubDate>Tue, 22 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-22-til/</guid>
      <description>오늘 한 일 / 배운점 새로운 팀 배정 팀 노션 작성 iOS 앱개발 숙련 강의 수강 팀 회고 과제 iOS 앱개발 숙련 강의 수강 느낀점 오늘 강의에서 Life Cycle(생명주기)을 배웠다
iOS 앱에서의 라이프사이클이란 만들어진 앱이 시작할떄부터 종료될때까지의 모든 이벤트를 의미하며 이 라이프사이클을 잘 이해해야만 앱의 동작과 상태변화에 따라 앱을 관리하고 적절한 대응을 할수가 있다고 한다
Not Running :
앱이 아직 실행되지 않은 상태. 앱은 동작하지 않는다
Inactive (Foreground) :
앱이 포그라운드, 실행 중에는 있지만 아직 이벤트는 받을 수 없는 상태</description>
    </item>
    
    <item>
      <title>WIL (8/14 - 8/18)</title>
      <link>https://sanc93.github.io/post/record/2023-08-19-wil/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-19-wil/</guid>
      <description>2023.8.14(월) - 8. 18(금) 😎 이번주에 한 일 iOS 앱개발 입문 팀 프로젝트 과제 팀 내 코드 리뷰 8/16 19:00 보충학습 (HG튜터님) : 프로토콜 8/18 19:00 보충학습 (HG튜터님) : 확장 😃 도움이 되었거나 즐거웠던 점 내배캠 정식 시작 전 flutter로 팀 프로젝트 한 것에 이어 swift를 이용한 첫 번째 팀 프로젝트였는데 2주동안 혼자 하다가 간만에 더 의욕도 생기고 즐거웠다 이번에는 팀 내 IS님이 처음부터 체계적으로 팀 내 규칙 같은 것을 짰는데 틀에 맞춰 돌아가는 걸 좋아하는 나로서는 팀 노션 구성하는 방식이라든지.</description>
    </item>
    
    <item>
      <title>TIL 23</title>
      <link>https://sanc93.github.io/post/record/2023-08-18-til/</link>
      <pubDate>Fri, 18 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-18-til/</guid>
      <description>오늘 한 일 / 배운점 iOS 앱개발 입문 팀 프로젝트 과제 8/16 9:00 팀 회의 / 코드리뷰 8/18 19:00 보충학습 (HG튜터님) : 확장 과제 iOS 앱개발 입문 팀 프로젝트 과제 느낀점 오늘은 보충수업때 확장(Extension)에 대한 개념을 배웠다
상속 - Person -&amp;gt; Developer, Doctor : 타입을 새로 만드는 것. 데이터를 추가하고 함수를 변형시켜 사용(수직적) 확장 - 현재 존재하는 타입에 함수를 추가하여 사용(수평적)
확장은 기존 타입에 새로운 기능을 추가하거나 확장하는 것을 의미한다. 상속과 달리 수직적인 확장이 아닌 수평적인 확장이라고 할 수 있으며</description>
    </item>
    
    <item>
      <title>TIL 22</title>
      <link>https://sanc93.github.io/post/record/2023-08-17-til/</link>
      <pubDate>Thu, 17 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-17-til/</guid>
      <description>오늘 한 일 / 배운점 iOS 앱개발 입문 팀 프로젝트 과제 8/16 9:00 팀 회의 / 코드리뷰 8/16 15:00 팀 회의 / 코드리뷰 과제 iOS 앱개발 입문 팀 프로젝트 과제 느낀점 오늘 세그먼트 컨트롤 값에 따라서
종료된 / 진행 중인 프로젝트를 셀을 다르게 뿌려주는 코드를 짰는데
// ...(생략) @objc private func segmentedControlValueChanged(_ sender: UISegmentedControl) { switch sender.selectedSegmentIndex { case 0: projectList = dummyProjectList.filter { $0.endDate &amp;lt; Date() } case 1: projectList = dummyProjectList.</description>
    </item>
    
    <item>
      <title>TIL 21</title>
      <link>https://sanc93.github.io/post/record/2023-08-16-til/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-16-til/</guid>
      <description>오늘 한 일 / 배운점 iOS 앱개발 입문 팀 프로젝트 과제 8/16 9:00 팀 회의 / 코드리뷰 8/16 15:00 팀 회의 / 코드리뷰 8/16 19:00 보충학습 (HG튜터님) : 프로토콜 과제 iOS 앱개발 입문 팀 프로젝트 과제 느낀점 오늘은 내 담당인 앱 메인화면을 만드는 작업을 했다
세그먼트 컨트롤을 만들고(아직 인덱스 값에 따라 처리하는 로직은 구현 못했다)
어제 만든 더미 데이터를 그 아래 테이블 뷰에 뿌리는 것 까지는 처리했다
그리고 오후에는 커스텀셀안에 UI적인 부분을 짰는데</description>
    </item>
    
    <item>
      <title>TIL 20</title>
      <link>https://sanc93.github.io/post/record/2023-08-14-til/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-14-til/</guid>
      <description>오늘 한 일 / 배운점 8/14 10:00 팀 회의 팀 노션 작성 주제 아이디어 정하기 와이어 프레임 짜기 프로젝트 규칙 정하기 역할 배분 팀 repository 및 브랜치 생성 과제 iOS 앱개발 입문 팀 프로젝트 과제 느낀점 오늘부터 1주간 팀 프로젝트가 시작되었다
필수 구현 사항으로는
메인 화면 디테일 화면 글쓰기 화면 마이 페이지 프로필 수정 페이지 예시로 나온 거는 당근마켓 인스타그램 쓰레드같은 SNS앱이였다
우리 팀은 &amp;ldquo;팀 프로젝트 관리 앱&amp;quot;을 만들기로 했다</description>
    </item>
    
    <item>
      <title>WIL (8/7 - 8/11)</title>
      <link>https://sanc93.github.io/post/record/2023-08-12-wil/</link>
      <pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-12-wil/</guid>
      <description>2023.8.7(월) - 8. 11(금) 😎 이번주에 한 일 개인 과제 및 제출 팀 내 코드 리뷰 개인과제 예제 코드 및 과제 해설 영상 보기 8/7 19:00 보충학습 (HG튜터님) 8/9 16:00 개인 면담 (SJ매니저님) 8/9 19:00 실시간 세션 : 옵셔널의 이해 + 예외처리 (HH튜터님) 8/11 19:00 보충학습 : 구조체와 클래스의 차이 (HG튜터님) 😃 도움이 되었거나 즐거웠던 점 이번 주에 보충학습에서 배운 메모리 영역에 대한 설명은 조금 어려웠지만 재미있었다.
HG 튜터님이 지난 시간부터 CS 적인 부분도 같이 설명해 주셔서,</description>
    </item>
    
    <item>
      <title>TIL 19</title>
      <link>https://sanc93.github.io/post/record/2023-08-11-til/</link>
      <pubDate>Fri, 11 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-11-til/</guid>
      <description>오늘 한 일 / 배운점 개인 과제 다듬기
개인 과제 제출
8/11 15:00 팀 내 코드리뷰
8/11 19:00 보충학습 (HG튜터님) : 구조체와 클래스의 차이
개인과제 예제 코드 및 과제 해설 영상 보기
과제 WIL 작성 느낀점 오늘은 보충학습 때 들은 내용이 너무 좋아서 정리를 해보려 한다.
구조체와 클래스 차이에 대해서 CS적인 개념으로 접근해서 설명해 주셨다.
메모리(RAM) 영역은 프로그램이 실행되는 동안 데이터와 명령을 저장하고 관리하는 공간인데
이 메모리 영역을 사용하여 프로그램의 실행과 데이터 처리를 가능하게 한다.</description>
    </item>
    
    <item>
      <title>TIL 18</title>
      <link>https://sanc93.github.io/post/record/2023-08-10-til/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-10-til/</guid>
      <description>오늘 한 일 / 배운점 개인 과제 다듬기 과제 개인 과제 다듬기 / 제출 느낀점 오늘은 처음으로 앱 아이콘이랑 LaunchScreen을 설정해 보고
이런 식으로 row를 스와이프 해서 처리 완료/미완료 전환하던 것을
didSelectRowAt로 탭 하여 전환하는 식으로 바꿨다거나
내일 과제 제출 마감날이어서
전체적으로 주석 정리하고 불필요한 코드 없애거나
좀 보이는 부분을 자잘 자잘 하게 수정했다
하나 애를 먹었던 것이
테이블 cell에 들어가는 완료/미완료 버튼이 상태에 따라 동적으로 바꾸고 싶은데
스토리보드로 생성해서 코드에서 변경하려고 하니까 텍스트 내용은 변경이 되는데</description>
    </item>
    
    <item>
      <title>TIL 17</title>
      <link>https://sanc93.github.io/post/record/2023-08-09-til/</link>
      <pubDate>Wed, 09 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-09-til/</guid>
      <description>오늘 한 일 / 배운점 개인 과제 Lv.3
8/9 15:00 팀 내 코드리뷰
8/9 16:00 개인 면담 (SJ매니저님)
8/9 19:00 실시간 세션 : 옵셔널의 이해 + 예외처리 (HH튜터님)
옵셔널 체이닝(OptionaI Chaining):
nil 값이 하나라도 있으면 결과도 nil, 모두 값이 있어야 결과를 꺼내줌. 예외 처리 : 말 그대로 예상치 못한 에러 상황을 다룸.
예외 처리에는 if 문, 함수에 throws 추가 등 다양한 방법이 있는데
예를 들어 아래와 같이 예외 처리가 가능하다</description>
    </item>
    
    <item>
      <title>TIL 16</title>
      <link>https://sanc93.github.io/post/record/2023-08-08-til/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-08-til/</guid>
      <description>오늘 한 일 / 배운점 개인 과제 Lv.2 과제 개인 과제 Lv.3 느낀점 어제에 이어서 var toDoTasks = [String]() 배열에 값을 저장하던것을 좀 고쳐보려고 했다
String 대신 ToDoTask라는 구조체를 만들어서 그 구조체를 타입으로 가지는 배열로 변경
import Foundation struct ToDoTask { var id: UUID // UUID로 고유 ID값 생성. 향후 이 UUID값을 id값으로 사용해서 용이하게 데이터 추가/변경 가능 var inputText: String var date: Date var isCompleted: Bool } 만든 ToDoTask 구조체는 model 폴더로 따로 빼기</description>
    </item>
    
    <item>
      <title>TIL 15</title>
      <link>https://sanc93.github.io/post/record/2023-08-07-til/</link>
      <pubDate>Mon, 07 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-07-til/</guid>
      <description>오늘 한 일 / 배운점 개인 과제 Lv.2 (진행중)
8/7 19:00 보충학습 : OT 및 옵셔널 (HG튜터님)
null? nil?
null : 메모리에 객체를 가리키는 포인터가 없음 객체가 없음 -&amp;gt; 접근하는 순간 에러
// nullPointerException var optionalName: String? print(optionalName) nil : 값이 없는 상태를 나타내는 키워드
var str = &amp;#34;&amp;#34; 옵셔널 선언
? 타입으로 선언하는 건 간략화된 표현.
let num1: Int? = 2 // 간편표기 let num2: Optional&amp;lt;Int&amp;gt; = 3 // 정식 문법 옵셔널은 어떻게 구현되어 있는가</description>
    </item>
    
    <item>
      <title>WIL (7/31 - 8/4)</title>
      <link>https://sanc93.github.io/post/record/2023-08-05-wil/</link>
      <pubDate>Sat, 05 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-05-wil/</guid>
      <description>2023.7.31(월) - 8. 4(금) 😎 이번주에 한 일 iOS 앱개발 입문 1주차 새로운 팀 배정 iOS 앱개발 입문 강의 수강 iOS 앱개발 입문 개인 과제 - My Todo List 8/4 19:00 실시간 세션 : 옵셔널의 이해 (HH튜터님) 😃 도움이 되었거나 즐거웠던 점 Xcode를 계속 사용하면서 전보다 점점 자연스럽게 익숙해지는 것 같았다
그리고 UIKit으로 앱을 만드는 건 스토리보드 인터페이스 빌더 사용해서 하는 것.
SwiftUI로 만드는 건 코드로 짠다 이런 건 줄 알았는데</description>
    </item>
    
    <item>
      <title>TIL 14</title>
      <link>https://sanc93.github.io/post/record/2023-08-04-til/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-04-til/</guid>
      <description>오늘 한 일 / 배운점 개인 과제 Lv.2 (진행중) 8/4 19:00 실시간 세션 : 옵셔널의 이해 (HH튜터님) 과제 개인 과제 Lv.2
오토 레이아웃 적용하기
UIButton 또는 UISegmentedControl 사용하여 할 일 완료/미완료 상태 만들기
할 일 완료되면 가로선 넣는 등.. 완료/미완료 상태에 따라 UI 변경
오토 레이아웃 적용하기 UIButton 또는 UISegmentedControl 사용하여 할 일 완료/미완료 상태 만들기 할 일 완료되면 가로선 넣는 등.. 완료/미완료 상태에 따라 UI 변경
느낀점 원래 오늘 계획했던 내용들은 하다가 또 다른 곳에 꽂혀서 자연스럽게 다음 주 월요일 계획으로 넘어갔다.</description>
    </item>
    
    <item>
      <title>TIL 13</title>
      <link>https://sanc93.github.io/post/record/2023-08-03-til/</link>
      <pubDate>Thu, 03 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-03-til/</guid>
      <description>오늘 한 일 / 배운점 개인 과제 Lv.2 (진행중) 과제 개인 과제 Lv.2
오토 레이아웃 적용하기
UIButton 또는 UISegmentedControl 사용하여 할 일 완료/미완료 상태 만들기
할 일 완료되면 가로선 넣는 등.. 완료/미완료 상태에 따라 UI 변경
오토 레이아웃 적용하기 UIButton 또는 UISegmentedControl 사용하여 할 일 완료/미완료 상태 만들기 할 일 완료되면 가로선 넣는 등.. 완료/미완료 상태에 따라 UI 변경
느낀점 소소한 배움 두가지
폴더링
뭔가 파일들을 깔끔하게 정리해 보고 싶어서 폴더링에 대해 찾아봤다</description>
    </item>
    
    <item>
      <title>TIL 12</title>
      <link>https://sanc93.github.io/post/record/2023-08-02-til/</link>
      <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-02-til/</guid>
      <description>오늘 한 일 / 배운점 iOS 앱 개발 입문 강의 수강 개인 과제 Lv.1 과제 개인 과제 Lv.2 느낀점 오늘 팀원 분들이랑 이야기하다가
이번 과제를 스토리보드로 짤지 코드로 짤지에 대한 이야기가 나왔었는데
밤에 마침 튜터님이 오셔서 물어봤다. 요즘에 현업에서는 스토리보드를 안 쓰는 추세고
특히나 스위프트 UI 나오고 나서는 더더욱 코드로 짜는 식으로 가고 있다고 한다.
그런데 스토리보드에서 오토 레이아웃, IBAction 연결 같은 거 연습하기 위해서
이번 과제는 모두 스토리보드로 하는 게 좋을 것 같다고 하심&amp;hellip; 스토리보드가 되면 코드는 할 수 있게 돼있다고</description>
    </item>
    
    <item>
      <title>TIL 11</title>
      <link>https://sanc93.github.io/post/record/2023-08-01-til/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-08-01-til/</guid>
      <description>오늘 한 일 / 배운점 iOS 앱 개발 입문 강의 수강 알고리즘 문제 풀기 과제 매일 1개 라도 알고리즘 문제 풀어보도록 내일은 진짜 개인 과제 시작하기 느낀점 오늘 팀원분들 중에 문법 공부 겸 알고리즘 문제 풀이를 하고 계시다는 분이 계셔서
문제 리스트와 이름이 적힌 구글 스프레드시트 링크를 보내주셨는데
전에 발제 때였나 분명히 이 시트 봤었는데 지금까지 존재를 잊고 있었다
목록 보니 이미 어마어마하게 나가신 분들도 계시고
오늘 한번 해봤는데 두 번째 문제부터 막혔다&amp;hellip; 감도 안 오고</description>
    </item>
    
    <item>
      <title>UIKit 02 : UIViewController</title>
      <link>https://sanc93.github.io/post/ios/2023-08-01-uikit-02/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/ios/2023-08-01-uikit-02/</guid>
      <description>UIViewController란 UI(유저 인터페이스)를 관리하는 데 사용되는 객체
→ UIViewController라는 클래스로 정의되어 있고 클래스를 사용해서 사용자 인터페이스 요소들과 로직을 관리하고, 다양한 뷰와 관련된 작업들을 처리한다. 예를 들어 UI 요소(button, label 등)와 이 요소의 동작들을 코드로 구현하여 제어할 수 있다. UIViewController에서 할 수 있는 것들 뷰의 라이프사이클 관리
→ 뷰 컨트롤러가 화면에 처음 표시되거나 화면에서 사라지는 시점 등 이벤트 처리 가능.
이를 통해 초기 설정, 데이터 로딩, 메모리 관리 등의 작업을 수행할 수 있다</description>
    </item>
    
    <item>
      <title>에러 : “View Controller“ is unreachable because it has no entry points...</title>
      <link>https://sanc93.github.io/post/etc/2023-07-10-error-03/</link>
      <pubDate>Tue, 01 Aug 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-10-error-03/</guid>
      <description>1. 문제 강의 보면서 실습하다가 뷰 컨트롤러 하나만 남기고 지웠는데 갑자기 Xcode에 이러한 에러가 뜬다.
“View Controller“ is unreachable because it has no entry points, and no identifier for runtime access via -[UIStoryboard instantiateViewControllerWithIdentifier:]. 2. 원인 이 오류는 스토리보드에서 해당 &amp;ldquo;View Controller&amp;quot;에 대한 엔트리포인트(진입점)을 내가 지정해 주지 않아서 그렇다.
3. 해결방법 View Controller를 클릭 &amp;gt; Attributes Inspector &amp;gt; Is Initial View Controller에 체크
하여 엔트리포인트를 추가해주자.
이렇게하면 뷰 컨트롤러에 엔트리포인트가 추가 된것도 확인이 가능하고 오류 메세지도 깔끔히 사라진다.</description>
    </item>
    
    <item>
      <title>TIL 10</title>
      <link>https://sanc93.github.io/post/record/2023-07-31-til/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-31-til/</guid>
      <description>오늘 한 일 / 배운점 새로운 팀 배정 iOS 앱 개발 입문 강의 수강 과제 뷰 컨트롤러 종류 더 파보기 개인 과제 조금이라도 시작해 보기 느낀점 드디어 오늘부터 UIKit을 배우게 되었다.
UIView와 UIViewController를 배웠는데 이렇게 뷰 컨트롤러에 종류가 많은 지 몰랐다.
또 강의 내내 뭔가 쓱쓱 지나가는 게 많아서 정신없이 코드 옮겨가며 따라가기 바빴는데
func 앞에 @objc는 뭔지.. 계속 나오는 animated는 또 뭔지.. 궁금한 건 많은데
전에 너무 한곳에 머물러서 깊게 파려 하지 말고 일단 몰라도 나가고</description>
    </item>
    
    <item>
      <title>UIKit 01 : UIView</title>
      <link>https://sanc93.github.io/post/ios/2023-07-31-uikit-01/</link>
      <pubDate>Mon, 31 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/ios/2023-07-31-uikit-01/</guid>
      <description>UIView란 iOS의 사용자 인터페이스(UI)를 구성하는 데 사용되는 객체
iOS 앱을 실행하면 보이는 대부분의 화면 요소들은 UIView를 사용하여 만들어졌다고 생각하면 된다.
배경, 화면, 아이콘, 글자 등 UIView를 기반으로 해서 만들어진다
UIView의 다양한 요소들을 시각적으로 적절하게 배치하면서 사용자에게 UI를 제공할 수 있다
주로 뷰 컨트롤러와 함께 사용 → UIView는 주로 UIViewController와 함께 사용된다.
UIView에서 할 수 있는 것들 위치, 크기 등을 조정
frame 속성 : 뷰의 위치와 크기를 설정 bounds 속성 : 화면 전환, 확대/ 축소 등의 변환 작업 수행 center 속성 : 뷰의 중심 위치를 설정(주로 뷰를 정중앙에 배치하는 데 사용) 배경색(backgroundColor, alpha, layer) 변경</description>
    </item>
    
    <item>
      <title>WIL (7/24 - 7/28)</title>
      <link>https://sanc93.github.io/post/record/2023-07-29-wil/</link>
      <pubDate>Sat, 29 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-29-wil/</guid>
      <description>2023.7.24(월) - 28(금) 😎 이번주에 한 일 프로그래밍 심화 주차(Swift) Swift 문법 심화 팀과제 - 키오스크 프로그래밍 7/24 - 25 20:00 알고리즘 세션 (YH 튜터님) 7/27 19:00 학습법 특강 (YI 매니저님) 😃 도움이 되었거나 즐거웠던 점 저번 주는 개인과제로 진행해서 그런 것도 있고 팀원분들이랑 이야기할 기회가 거의 없었는데
이번에는 팀 프로젝트까진 아니지만 팀 과제였어서 매일 같이 코드 리뷰하고 대화하면서 많은 정보도 얻고
특히 JM님이 되게 솔직하고 긍정적이어서 좋은 에너지를 많이 얻었던 것 같다.</description>
    </item>
    
    <item>
      <title>TIL 09</title>
      <link>https://sanc93.github.io/post/record/2023-07-28-til/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-28-til/</guid>
      <description>오늘 한 일 / 배운점 팀 내 코드 리뷰
Swift 문법 강의 수강
팀 과제 코드 작성 / 제출 (팀장 JM님 통해서)
→ 일단 이번 필수 사항 Lv.3 까지는 충족이 된 것 같아서
그렇다고 선택 과제 Lv.4, Lv.5까지는 시간이 모자랄 것 같고 개인적으로 궁금했던걸 해보았다.
이번 키오스크를 맥도날드로 만들었는데 맥도날드에는 맥모닝과 맥런치가 있는데
이용 시간대를 막아놔야 정상적이지 않겠는가.. 🧐
let dateFormatter = DateFormatter() func currentTime() -&amp;gt; String { dateFormatter.locale = Locale(identifier:&amp;#34;ko_KR&amp;#34;) dateFormatter.</description>
    </item>
    
    <item>
      <title>TIL 08</title>
      <link>https://sanc93.github.io/post/record/2023-07-27-til/</link>
      <pubDate>Thu, 27 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-27-til/</guid>
      <description>오늘 한 일 / 배운점 팀 내 코드 리뷰
Swift 문법 강의 수강
팀 과제 Lv.3 코드 작성
7/27 19:00 학습법 특강 (YI 매니저님)
&amp;ldquo;코더가 되지말고 개발자가 되자!&amp;rdquo;
이번 부트캠프에서 가장 중요한거 4가지
TIL, WIL : 꾸준함 성실함으로 나의 자산이 됨. 개발 문화에서는 매우 중요
개인과제/팀과제 : 배운 내용을 복습하면서 내 힘으로 사고력과 구현력을 중점으로 단련 가능
프로젝트: 협업이 단순히 사이좋게 무언가를 만드는 게 아니고 어떤 기술적 의사결정, 기술적 고민같이 머리를 맞대고 합리적으로 하는지 그런 과정이 중요해서 협업이 중요한 것.</description>
    </item>
    
    <item>
      <title>TIL 07</title>
      <link>https://sanc93.github.io/post/record/2023-07-26-til/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-26-til/</guid>
      <description>오늘 한 일 / 배운점 Swift 문법 강의 수강
→ 스위프트에서 옵셔널(Optional)이라는게
값이 있을 수도 없을 수도 있다는 걸 나타내서 안전하다는 건 알겠다.
근데 이걸 쓰면 도대체 뭐가 좋길래 써야 하는가..! 에 대한 의문이 항상 있었다.
뭐 어련히 좋은 게 있으니까 쓰겠거니 했는데 그 궁금증이 오늘 야곰 스위프트 강의를 보다가 풀렸다
옵셔널이 없는 언어들 같은 경우에는 nil이 들어가는지 아닌지 설명을 하려면
주석을 달거나 어디에 따로 문서를 작성해놓던가 하는 게 일반적이겠지만</description>
    </item>
    
    <item>
      <title>TIL 06</title>
      <link>https://sanc93.github.io/post/record/2023-07-25-til/</link>
      <pubDate>Tue, 25 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-25-til/</guid>
      <description>오늘 한 일 / 배운점 팀 내 코드 리뷰
→ 팀에 스위프트 잘 아는 분이 계신데
switch 문에서 열거형(enum)으로 정의된 걸 사용하는 게 좋다고 한다.
가독성도 올라가고 실무에서는 보통 이렇게 한다고.. 설명 들을 때는 이따가 바로 해봐야지 했는데
막상 내 코드를 보니 어디에 적용해야 할지 모르겠다 orz..
열거형에 대해 두루뭉실한 것도 있고 해서 더 찾아보면서 해볼 예정 팀 과제 Lv.2 코드 작성 7/25 20:00 알고리즘 세션 (YH 튜터님)
→ 어제 튜터님이 한번 생각해오세요 한 알고리즘 문제는 다른 것에 밀려 하지 못했다.</description>
    </item>
    
    <item>
      <title>TIL 05</title>
      <link>https://sanc93.github.io/post/record/2023-07-24-til/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-24-til/</guid>
      <description>오늘 한 일 / 배운점 Swift 문법 강의 수강
→ SJ님이 부스트코스(https://www.boostcourse.org/)에
야곰 무료 강의로 swift의 기초 강의가 있으니 들어보라고 추천해 주셔서 들어봤는데
물론 지금 부트 캠프 강의랑 중복되는 부분도 있지만 조금 더 자세하게 훑고 가주는 것 같아서
나처럼 초심자에게는 약간 더 친절한 것 같았다. 둘 다 병행해서 들어야지
팀 과제 Lv.1 코드 작성
이번주도 새로운 과제를 시작하려는데 처음 레포지토리에 push하려니
.DS_Store, contents.xcworkspacedata 이런 것들이 뜬다.. 하나하나 입력하려다 혹시나 해서 찾아보니</description>
    </item>
    
    <item>
      <title>Swift 05 : 반복문</title>
      <link>https://sanc93.github.io/post/swift/2023-07-21-swift-05/</link>
      <pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-21-swift-05/</guid>
      <description>for(for-in)문 컬렉션 타입(배열, 딕셔너리 등)의 모든 요소를 순회하는데 사용 let numbers = [1, 2, 3, 4, 5] for number in numbers { print(number) } // 1 // 2 // 3 // 4 // 5 while문 반복문 진입 전에 조건을 검사하고 조건이 true인 경우에 코드 블록을 실행,
false이면 반복문을 빠져나옴
(반복문이 실행되기 전 조건이 false면 while문 내부는 단 한번도 실행 안됨) var i = 0 while i &amp;lt; 5 { print(i) i += 1 } // 0 // 1 // 2 // 3 // 4 repeat-while문 조건을 평가하기 전에 코드 블록을 최소한 한 번은 실행하는 while문</description>
    </item>
    
    <item>
      <title>Swift 04 : 튜플(Tuple) 그리고 컬렉션 타입 (Collection Types)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-20-swift-04/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-20-swift-04/</guid>
      <description>튜플? 컬렉션 타입? 컬렉션 타입은 동일한 타입의 여러 개의 값을 하나로 묶어서 처리할수록 하는 데이터 타입을 의미한다.
Swift에서는 배열(Array), 딕셔너리(Dictionary), 세트(Set)가 컬렉션 타입에 해당한다.
반면 튜플(Tuple)은 여러 데이터 타입을 하나로 묶어서 사용할 수 있으며, 컬렉션 타입이 아닌 복합 데이터 타입이다. 데이터를 묶어서 다룬다는 점에서 비슷하게 느껴지나 다르다.
튜플은 주로 함수나 메서드의 반환값으로 여러 값을 리턴할 때 사용하거나 임시적으로 관련 데이터를 묶어서 사용할 때 활용되며
컬렉션 타입은 여러 개의 데이터를 효율적으로 다루고 관리하는 데 사용된다.</description>
    </item>
    
    <item>
      <title>TIL 04</title>
      <link>https://sanc93.github.io/post/record/2023-07-20-til/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-20-til/</guid>
      <description>오늘 한 일 Swift 문법 강의 수강
객체 지향 프로그래밍 특징에 대한 이해
https://lazy-kim.com/post/etc/2023-07-19-etc-01/
https://lazy-kim.com/post/etc/2023-07-19-etc-02/
과제 다른 프로그래밍 패러다임에 대해서도 찾아보기 느낀점 전에 다녔던 직장들에서 Java를 사용하면서 객체지향 프로그래밍 언어라는 말을 종종 많이 듣긴 했으나
정작 그걸 사용하면서도 구현하고 굴러가게 하는 데에 급급했던 것 같아서 객체지향이란 말에 대해서 정확하게 알지 못했던 것 같다.
앞으로 배울 swift도 객체 지향 프로그래밍도 들어간 다중 패러다임 프로그래밍 언어(사실 이 말도 이해하기 어려움..ㅠㅠ)라고 하니
오늘 배웠던 SOLID 원칙을 지켜가면서 더 견고하고 깨끗한 코드를 작성하도록 노력해야겠다고 생각했다.</description>
    </item>
    
    <item>
      <title>Swift 03 : 연산자 (Operators)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-19-swift-03/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-19-swift-03/</guid>
      <description>연산자란 연산자는 프로그래밍에서 값을 조작하거나 다른 값들 간의 관계를 표현하기 위해 사용되는 기호나 기호의 조합. Swift에서도 다른 프로그래밍 언어와 같이 다양한 종류의 연산자를 제공한다.
산술 연산자 (Arithmetic Operators) 숫자 값들의 산술 연산을 수행. 일반적인 수학 기호와 특별히 다를 건 없다
+ 덧셈 - 뺄셈 * 곱셈 / 나눗셈 % 나머지* % (나머지) 예시 let a = 13 let b = 5 print(a%b) // 3 할당 연산자 (Arithmetic Operators) 할당 연산자는 오른쪽에 값을 왼쪽 변수에 할당 한다.</description>
    </item>
    
    <item>
      <title>TIL 03</title>
      <link>https://sanc93.github.io/post/record/2023-07-19-til/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-19-til/</guid>
      <description>오늘 한 일 Swift 문법 강의 수강
개인 과제 제출
→ swift로 계산기를 구현하는(화면까진 아니고 콘솔에 출력하는 정도만) 과제가 있었는데
과제 고려 사항에 단일 책임 원칙, 의존성 역전 원칙이라는 용어가 나와서 😧&amp;hellip;
이걸 풀어서 하나하나 생각하면 이해하겠는데 막상 누군가에게 정리해서 이야기해야 한다면 잘 못할 것 같다
주중에 한번 정리해서 글로 올려봐야겠다
7/19 20:00 특강 : 좋은 개발자의 비밀 (BH 튜터님)
수능 잘 본 사람 != 일 잘하는 사람 실무 1주일 &amp;gt; 개인 공부 3개월 명심</description>
    </item>
    
    <item>
      <title>객체 지향 프로그래밍의 SOLID 원칙</title>
      <link>https://sanc93.github.io/post/etc/2023-07-19-etc-02/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-19-etc-02/</guid>
      <description>객체 지향 프로그래밍(OOP)에서는 SOLID라고 불리는 중요한 다섯가지 원칙이 있다.
SRP (Single Responsibility Principle) : 단일 책임 원칙 클래스는 하나의 기능 또는 역할에만 집중해야 함.
단일 책임 원칙(SRP)을 지키지 못한 코드
class Student { func examScore() { // 시험 점수 로직 } func saveToDatabase() { // DB에 저장하는 로직 } } Student 클래스에 시험 점수 로직과 DB 저장 두 가지 기능이 모두 포함되어 있는데 하나의 클래스가 여러 개의 기능을 가지면 변경이 발생할 때 다른 기능에 영향을 미칠 수 있으며, 코드가 복잡해질 수 있으므로 좋은 코드는 아니다</description>
    </item>
    
    <item>
      <title>프로그래밍 패러다임 : 객체지향 프로그래밍(OOP)</title>
      <link>https://sanc93.github.io/post/etc/2023-07-19-etc-01/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-19-etc-01/</guid>
      <description>Object-Oriented Programming(OOP), 객체 지향 프로그래밍이란 프로그래밍 패러다임 중 하나로 프로그램을 객체라는 단위로 분해하고 이러한 객체들 간의 상호작용을 통해 프로그램을 구현하는 방식의 프로그래밍 접근 방법이다.
여기서 객체란 무언가를 만들 때 사용하는 부품이라고 할 수 있는데, 예를 들어 자동차를 만들 때 엔진, 바퀴, 핸들 등이 부품으로 사용된다고 치자. 이러한 부품들은 각자의 기능들이 있고, 함께 조립되어 자동차가 완성된다.
이렇게 부품을 하나하나 조립하여 더 큰 물건을 만드는 것이 객체 지향 프로그래밍이라고 할 수 있다.</description>
    </item>
    
    <item>
      <title>Swift 02 : 프로퍼티 (Property)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-18-swift-02/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-18-swift-02/</guid>
      <description>프로퍼티란 Swift 언어에서 클래스, 구조체 또는 열거형 등의 데이터 구조 내부에 속한 값
데이터 구조의 특성을 나타내거나 저장하고 있는 데이터를 의미한다.
1. 저장프로퍼티 2. 연산프로퍼티 프로퍼티는 크게 이 두가지 유형으로 나뉜다.
저장 프로퍼티 (Stored Property) var : 변경할 수 있는 변수(Variable)를 선언할 떄 사용
let a = 100 a = 200 print(a) // 100 let : 변경할 수 없는 상수(Constant)를 선언 할때 사용
let a = 100 a = 200 // 에러 발생.</description>
    </item>
    
    <item>
      <title>TIL 02</title>
      <link>https://sanc93.github.io/post/record/2023-07-18-til/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-18-til/</guid>
      <description>오늘 한 일 Swift 문법 강의 수강 Typora에서 이미지 파일이 안 올라가는 문제 해결
→ 어제 어디서 본 author profile에 적는 categories 이 부분이 경로를 꼬이게 한다는 말은 dog소리였고
생각해 보니 이 블로그 about-me에 올라간 md 파일에는 사진을 첨부했었는데
아니 그럼 그땐 내가 어떻게 한 거지.. 하다가 경로가 문제라는 것을 알게 됐다
Typora에서 마크다운 파일을 작성할 때 drag &amp;amp; drop으로 간편하게 이미지 삽입이 가능한데
그때 지정한 폴더로 복사하는 건 잘 된다.</description>
    </item>
    
    <item>
      <title>Swift 01 : Swift란</title>
      <link>https://sanc93.github.io/post/swift/2023-07-17-swift-01/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-17-swift-01/</guid>
      <description>Swift란 2014년 WWDC를 통해서 처음 공개된 언어
기존에는 Objective-C로만 iOS앱 개발이 가능했는데 Swift가 공개 되고나서는 Swift로도 iOS앱을 개발 할수 있게 되었다. 비교적 최근에 나온 언어인 만큼, 기존 프로그래밍 언어들이 많이 참고되었다.
Swift의 특징 안정성 Type에 엄격하다 1 문자열 배열에는 문자열만 담을 수 있다. 타입 안정성을 위해 타입체크를 해줘야한다. nil(빈 값)에 엄격하다 컴파일을 할떄 문제가 될수있는 nil객 체를 만들거나 사용할수 없도록 함. (nil을 사용할 경우 옵셔널(Optional)을 이용하여 빈값이 올수도 있다고 표현) 표현성 표현성을 고려한 프로그래밍 언어이다.</description>
    </item>
    
    <item>
      <title>TIL 01</title>
      <link>https://sanc93.github.io/post/record/2023-07-17-til/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-17-til/</guid>
      <description>오늘 한 일 첫 TIL 작성
평일에 배운 것을 매일매일 기록하기
Swift 문법 강의 수강
저번주 팀 프로젝트 회고시간에 JY님이 추천한 몇가지 다운로드
스팟라이트 (Spotlight) → Raycast 터미널 (Terminal) → Hyper 과제 Hyper 터미널에서 plug-in 이 되는 게 있고 안되는 게 있다. 원인 모름 Typora에서 이미지 파일이 안 올라가는 문제 → 뭔가 author profile에 적는 categories 이 부분이 경로를 꼬이게 한다는 말도 있는 것 같다.. 느낀점 오늘부터 TIL을 쓰려고 한다.</description>
    </item>
    
    <item>
      <title>XCode 단축키 모음 (Xcode Keyboard Shortcuts)</title>
      <link>https://sanc93.github.io/post/etc/2023-07-17-etc-01/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-17-etc-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>에러 : Because 프로젝트명 requires SDK version &gt;=3.0.5 &lt;4.0.0, version solving failed.</title>
      <link>https://sanc93.github.io/post/etc/2023-07-10-error-02/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-10-error-02/</guid>
      <description>1. 문제 Flutter 프로젝트를 끌어와서 VSCode &amp;gt; pubspec.yml 파일에서 Get Packages 하려고 하니 디버그 콘솔에 이러한 문구가 뜬다.
Resolving dependencies... The current Dart SDK version is 3.0.3. Because introduce_e1if requires SDK version &amp;gt;=3.0.5 &amp;lt;4.0.0, version solving failed. Exited (1) 2. 원인 내 Dart 버전이 3.0.3 인데 3.0.5 ~ 4.0.0 버전을 요구하고 있어서 그렇다
.. environment: sdk: &amp;#39;&amp;gt;=3.0.5 &amp;lt;4.0.0&amp;#39; .. 3. 해결방법 Dart SDK를 올려주면 해결된다. VSCode Terminal에서 flutter upgrade 해주자</description>
    </item>
    
    <item>
      <title>에러 : VSCode에서 iOS Emulator가 뜨지 않을때</title>
      <link>https://sanc93.github.io/post/etc/2023-07-10-error-01/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-10-error-01/</guid>
      <description>1. 문제 iOS 에뮬레이터 실행 해보려 했는데
없다&amp;hellip;.
Resolving dependencies... The current Dart SDK version is 3.0.3. Because introduce_e1if requires SDK version &amp;gt;=3.0.5 &amp;lt;4.0.0, version solving failed. Exited (1) 2. 원인 3. 해결방법 VSCode 터미널에서
sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer 을 해주자
그럼 잘~ 뜬다</description>
    </item>
    
    <item>
      <title>Flutter 01 : Flutter와 Dart의 관계</title>
      <link>https://sanc93.github.io/post/flutter/2023-07-07-flutter/</link>
      <pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/flutter/2023-07-07-flutter/</guid>
      <description>앱 개발 방법은
① 네이티브 앱(Native App)
② 크로스 플랫폼 앱(Cross Platform App)
이렇게 크게 2가지로 나뉜다.
네이티브 앱(Native App)
원래 앱을 개발하던 방식. 모바일 기기는 iOS와 Android로 양분되어 있다.
네이티브로 앱을 제작하려면 안드로이드, iOS 앱을 각각의 개발 방법으로 두 번 제작 해야 함.
따라서 리소스가 많이 들어간다는 단점은 있지만 성능이 가장 빠르고 최신 기능을 빠르게 적용할 수 있다는 장점이 있다.
Android
개발 언어: Java, Kotlin
개발 툴 : Android Studio</description>
    </item>
    
    <item>
      <title>첫 글</title>
      <link>https://sanc93.github.io/post/1/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/1/</guid>
      <description>야호!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sanc93.github.io/post/record/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/untitled/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
