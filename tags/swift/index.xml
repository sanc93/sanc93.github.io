<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>swift on 개발노트</title>
    <link>https://sanc93.github.io/tags/swift/</link>
    <description>Recent content in swift on 개발노트</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2023, Sanghun Kim; all rights reserved.</copyright>
    <lastBuildDate>Fri, 21 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sanc93.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift 05 : 반복문</title>
      <link>https://sanc93.github.io/post/swift/2023-07-21.swift-05/</link>
      <pubDate>Fri, 21 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-21.swift-05/</guid>
      <description>for(for-in)문 컬렉션 타입(배열, 딕셔너리 등)의 모든 요소를 순회하는데 사용 let numbers = [1, 2, 3, 4, 5] for number in numbers { print(number) } // 1 // 2 // 3 // 4 // 5 while문 반복문 진입 전에 조건을 검사하고 조건이 true인 경우에 코드 블록을 실행,
false이면 반복문을 빠져나옴
(반복문이 실행되기 전 조건이 false면 while문 내부는 단 한번도 실행 안됨) var i = 0 while i &amp;lt; 5 { print(i) i += 1 } // 0 // 1 // 2 // 3 // 4 repeat-while문 조건을 평가하기 전에 코드 블록을 최소한 한 번은 실행하는 while문</description>
    </item>
    
    <item>
      <title>Swift 04 : 튜플(Tuple) 그리고 컬렉션 타입 (Collection Types)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-20-swift-04/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-20-swift-04/</guid>
      <description>튜플? 컬렉션 타입? 컬렉션 타입은 동일한 타입의 여러 개의 값을 하나로 묶어서 처리할수록 하는 데이터 타입을 의미한다.
Swift에서는 배열(Array), 딕셔너리(Dictionary), 세트(Set)가 컬렉션 타입에 해당한다.
반면 튜플(Tuple)은 여러 데이터 타입을 하나로 묶어서 사용할 수 있으며, 컬렉션 타입이 아닌 복합 데이터 타입이다. 데이터를 묶어서 다룬다는 점에서 비슷하게 느껴지나 다르다.
튜플은 주로 함수나 메서드의 반환값으로 여러 값을 리턴할 때 사용하거나 임시적으로 관련 데이터를 묶어서 사용할 때 활용되며
컬렉션 타입은 여러 개의 데이터를 효율적으로 다루고 관리하는 데 사용된다.</description>
    </item>
    
    <item>
      <title>Swift 03 : 연산자 (Operators)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-19-swift-03/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-19-swift-03/</guid>
      <description>연산자란? 연산자는 프로그래밍에서 값을 조작하거나 다른 값들 간의 관계를 표현하기 위해 사용되는 기호나 기호의 조합. Swift에서도 다른 프로그래밍 언어와 같이 다양한 종류의 연산자를 제공한다.
산술 연산자 (Arithmetic Operators) 숫자 값들의 산술 연산을 수행. 일반적인 수학 기호와 특별히 다를 건 없다
+ 덧셈 - 뺄셈 * 곱셈 / 나눗셈 % 나머지* % (나머지) 예시 let a = 13 let b = 5 print(a%b) // 3 할당 연산자 (Arithmetic Operators) 할당 연산자는 오른쪽에 값을 왼쪽 변수에 할당 한다.</description>
    </item>
    
    <item>
      <title>Swift 02 : 프로퍼티 (Property)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-18-swift-02/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-18-swift-02/</guid>
      <description>프로퍼티란? Swift 언어에서 클래스, 구조체 또는 열거형 등의 데이터 구조 내부에 속한 값
데이터 구조의 특성을 나타내거나 저장하고 있는 데이터를 의미한다.
1. 저장프로퍼티 2. 연산프로퍼티 프로퍼티는 크게 이 두가지 유형으로 나뉜다.
저장 프로퍼티 (Stored Property) var : 변경할 수 있는 변수(Variable)를 선언할 떄 사용
let a = 100 a = 200 print(a) // 100 let : 변경할 수 없는 상수(Constant)를 선언 할때 사용
let a = 100 a = 200 // 에러 발생.</description>
    </item>
    
    <item>
      <title>Swift 01 : Swift란</title>
      <link>https://sanc93.github.io/post/swift/2023-07-17-swift-01/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-17-swift-01/</guid>
      <description>Swift란 2014년 WWDC를 통해서 처음 공개된 언어
기존에는 Objective-C로만 iOS앱 개발이 가능했는데 Swift가 공개 되고나서는 Swift로도 iOS앱을 개발 할수 있게 되었다. 비교적 최근에 나온 언어인 만큼, 기존 프로그래밍 언어들이 많이 참고되었다.
Swift의 특징 안정성 Type에 엄격하다 1 문자열 배열에는 문자열만 담을 수 있다. 타입 안정성을 위해 타입체크를 해줘야한다. nil(빈 값)에 엄격하다 컴파일을 할떄 문제가 될수있는 nil객 체를 만들거나 사용할수 없도록 함. (nil을 사용할 경우 옵셔널(Optional)을 이용하여 빈값이 올수도 있다고 표현) 표현성 표현성을 고려한 프로그래밍 언어이다.</description>
    </item>
    
  </channel>
</rss>
