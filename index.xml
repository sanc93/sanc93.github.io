<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>개발노트</title>
    <link>https://sanc93.github.io/</link>
    <description>Recent content on 개발노트</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>Copyright © 2023, Sanghun Kim; all rights reserved.</copyright>
    <lastBuildDate>Thu, 20 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://sanc93.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Swift 04 : 튜플(Tuple) 그리고 컬렉션 타입 (Collection Types)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-20-swift-04/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-20-swift-04/</guid>
      <description>튜플? 컬렉션 타입? 컬렉션 타입은 동일한 타입의 여러 개의 값을 하나로 묶어서 처리할수록 하는 데이터 타입을 의미한다.
Swift에서는 배열(Array), 딕셔너리(Dictionary), 세트(Set)가 컬렉션 타입에 해당한다.
반면 튜플(Tuple)은 여러 데이터 타입을 하나로 묶어서 사용할 수 있으며, 컬렉션 타입이 아닌 복합 데이터 타입이다. 데이터를 묶어서 다룬다는 점에서 비슷하게 느껴지나 다르다.
튜플은 주로 함수나 메서드의 반환값으로 여러 값을 리턴할 때 사용하거나 임시적으로 관련 데이터를 묶어서 사용할 때 활용되며
컬렉션 타입은 여러 개의 데이터를 효율적으로 다루고 관리하는 데 사용된다.</description>
    </item>
    
    <item>
      <title>TIL 04</title>
      <link>https://sanc93.github.io/post/record/2023-07-20-til/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-20-til/</guid>
      <description>오늘 한 일 Swift 문법 강의 수강
객체 지향 프로그래밍 특징에 대한 이해
https://lazy-kim.com/post/etc/2023-07-19-etc-01/
https://lazy-kim.com/post/etc/2023-07-19-etc-02/
과제 다른 프로그래밍 패러다임에 대해서도 찾아보기 느낀점 전에 다녔던 직장들에서 Java를 사용하면서 객체지향 프로그래밍 언어라는 말을 종종 많이 듣긴 했으나 정작 그걸 사용하면서도 객체지향이란 말에 대해서 정확하게 알지 못했던 것 같다. 일단은 구현하고 굴러가게 하는 데에 급급했던 것 같아서.. 앞으로 배울 swift도 객체 지향 프로그래밍도 들어간 다중 패러다임 프로그래밍 언어(사실 이 말도 이해하기 어려움..ㅠㅠ)라고 하니 오늘 배웠던 SOLID 원칙을 지켜가면서 더 견고하고 깨끗한 코드를 작성하도록 노력해야겠다고 생각했다.</description>
    </item>
    
    <item>
      <title>Swift 03 : 연산자 (Operators)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-19-swift-03/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-19-swift-03/</guid>
      <description>연산자란? 연산자는 프로그래밍에서 값을 조작하거나 다른 값들 간의 관계를 표현하기 위해 사용되는 기호나 기호의 조합. Swift에서도 다른 프로그래밍 언어와 같이 다양한 종류의 연산자를 제공한다.
산술 연산자 (Arithmetic Operators) 숫자 값들의 산술 연산을 수행. 일반적인 수학 기호와 특별히 다를 건 없다
+ 덧셈 - 뺄셈 * 곱셈 / 나눗셈 % 나머지* % (나머지) 예시 let a = 13 let b = 5 print(a%b) // 3 할당 연산자 (Arithmetic Operators) 할당 연산자는 오른쪽에 값을 왼쪽 변수에 할당 한다.</description>
    </item>
    
    <item>
      <title>TIL 03</title>
      <link>https://sanc93.github.io/post/record/2023-07-19-til/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-19-til/</guid>
      <description>오늘 한 일 Swift 문법 강의 수강
개인 과제 제출
→ swift로 계산기를 구현하는(화면까진 아니고 콘솔에 출력하는 정도만) 과제가 있었는데
과제 고려 사항에 단일 책임 원칙, 의존성 역전 원칙이라는 용어가 나와서 😧&amp;hellip;
이걸 풀어서 하나하나 생각하면 이해하겠는데 막상 누군가에게 정리해서 이야기해야 한다면 잘 못할 것 같다
주중에 한번 정리해서 글로 올려봐야겠다
7/19 20:00 특강 : 좋은 개발자의 비밀 (BH 튜터님)
수능 잘 본 사람 != 일 잘하는 사람 실무 1주일 &amp;gt; 개인 공부 3개월 명심</description>
    </item>
    
    <item>
      <title>객체 지향 프로그래밍의 SOLID 원칙</title>
      <link>https://sanc93.github.io/post/etc/2023-07-19-etc-02/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-19-etc-02/</guid>
      <description>객체 지향 프로그래밍(OOP)에서는 SOLID라고 불리는 중요한 다섯가지 원칙이 있다.
SRP (Single Responsibility Principle) : 단일 책임 원칙 클래스는 하나의 기능 또는 역할에만 집중해야 함.
단일 책임 원칙(SRP)을 지키지 못한 코드
class Student { func examScore() { // 시험 점수 로직 } func saveToDatabase() { // DB에 저장하는 로직 } } Student 클래스에 시험 점수 로직과 DB 저장 두 가지 기능이 모두 포함되어 있는데 하나의 클래스가 여러 개의 기능을 가지면 변경이 발생할 때 다른 기능에 영향을 미칠 수 있으며, 코드가 복잡해질 수 있으므로 좋은 코드는 아니다</description>
    </item>
    
    <item>
      <title>프로그래밍 패러다임 : 객체지향 프로그래밍</title>
      <link>https://sanc93.github.io/post/etc/2023-07-19-etc-01/</link>
      <pubDate>Wed, 19 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-19-etc-01/</guid>
      <description>Object-Oriented Programming(OOP), 객체 지향 프로그래밍이란 프로그래밍 패러다임 중 하나로 프로그램을 객체라는 단위로 분해하고 이러한 객체들 간의 상호작용을 통해 프로그램을 구현하는 방식의 프로그래밍 접근 방법이다.
여기서 객체란 무언가를 만들 때 사용하는 부품이라고 할 수 있는데, 예를 들어 자동차를 만들 때 엔진, 바퀴, 핸들 등이 부품으로 사용된다고 치자. 이러한 부품들은 각자의 기능들이 있고, 함께 조립되어 자동차가 완성된다.
이렇게 부품을 하나하나 조립하여 더 큰 물건을 만드는 것이 객체 지향 프로그래밍이라고 할 수 있다.</description>
    </item>
    
    <item>
      <title>Swift 02 : 프로퍼티 (Property)</title>
      <link>https://sanc93.github.io/post/swift/2023-07-18-swift-02/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-18-swift-02/</guid>
      <description>프로퍼티란? Swift 언어에서 클래스, 구조체 또는 열거형 등의 데이터 구조 내부에 속한 값
데이터 구조의 특성을 나타내거나 저장하고 있는 데이터를 의미한다.
1. 저장프로퍼티 2. 연산프로퍼티 프로퍼티는 크게 이 두가지 유형으로 나뉜다.
저장 프로퍼티 (Stored Property) var : 변경할 수 있는 변수(Variable)를 선언할 떄 사용
let a = 100 a = 200 print(a) // 100 let : 변경할 수 없는 상수(Constant)를 선언 할때 사용
let a = 100 a = 200 // 에러 발생.</description>
    </item>
    
    <item>
      <title>TIL 02</title>
      <link>https://sanc93.github.io/post/record/2023-07-18-til/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-18-til/</guid>
      <description>오늘 한 일 Swift 문법 강의 수강 Typora에서 이미지 파일이 안 올라가는 문제 해결
→ 어제 어디서 본 author profile에 적는 categories 이 부분이 경로를 꼬이게 한다는 말은 dog소리였고
생각해 보니 이 블로그 about-me에 올라간 md 파일에는 사진을 첨부했었는데
아니 그럼 그땐 내가 어떻게 한 거지.. 하다가 경로가 문제라는 것을 알게 됐다
Typora에서 마크다운 파일을 작성할 때 drag &amp;amp; drop으로 간편하게 이미지 삽입이 가능한데
그때 지정한 폴더로 복사하는 건 잘 된다.</description>
    </item>
    
    <item>
      <title>Swift 01 : Swift란</title>
      <link>https://sanc93.github.io/post/swift/2023-07-17-swift-01/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/2023-07-17-swift-01/</guid>
      <description>Swift란 2014년 WWDC를 통해서 처음 공개된 언어
기존에는 Objective-C로만 iOS앱 개발이 가능했는데 Swift가 공개 되고나서는 Swift로도 iOS앱을 개발 할수 있게 되었다. 비교적 최근에 나온 언어인 만큼, 기존 프로그래밍 언어들이 많이 참고되었다.
Swift의 특징 안정성 Type에 엄격하다 1 문자열 배열에는 문자열만 담을 수 있다. 타입 안정성을 위해 타입체크를 해줘야한다. nil(빈 값)에 엄격하다 컴파일을 할떄 문제가 될수있는 nil객 체를 만들거나 사용할수 없도록 함. (nil을 사용할 경우 옵셔널(Optional)을 이용하여 빈값이 올수도 있다고 표현) 표현성 표현성을 고려한 프로그래밍 언어이다.</description>
    </item>
    
    <item>
      <title>TIL 01</title>
      <link>https://sanc93.github.io/post/record/2023-07-17-til/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/record/2023-07-17-til/</guid>
      <description>오늘 한 일 첫 TIL 작성
평일에 배운 것을 매일매일 기록하기
Swift 문법 강의 수강
저번주 팀 프로젝트 회고시간에 JY님이 추천한 몇가지 다운로드
스팟라이트 (Spotlight) → Raycast 터미널 (Terminal) → Hyper 과제 Hyper 터미널에서 plug-in 이 되는 게 있고 안되는 게 있다. 원인 모름 Typora에서 이미지 파일이 안 올라가는 문제 → 뭔가 author profile에 적는 categories 이 부분이 경로를 꼬이게 한다는 말도 있는 것 같다.. 느낀점 오늘부터 TIL을 쓰려고 한다.</description>
    </item>
    
    <item>
      <title>XCode 단축키 모음 (Xcode Keyboard Shortcuts)</title>
      <link>https://sanc93.github.io/post/etc/2023-07-17-etc-01/</link>
      <pubDate>Mon, 17 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-17-etc-01/</guid>
      <description></description>
    </item>
    
    <item>
      <title>에러 : Because 프로젝트명 requires SDK version &gt;=3.0.5 &lt;4.0.0, version solving failed.</title>
      <link>https://sanc93.github.io/post/etc/2023-07-10-error-02/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-10-error-02/</guid>
      <description>1. 문제 Flutter 프로젝트를 끌어와서 VSCode &amp;gt; pubspec.yml 파일에서 Get Packages 하려고 하니 디버그 콘솔에 이러한 문구가 뜬다.
Resolving dependencies... The current Dart SDK version is 3.0.3. Because introduce_e1if requires SDK version &amp;gt;=3.0.5 &amp;lt;4.0.0, version solving failed. Exited (1) 2. 원인 내 Dart 버전이 3.0.3 인데 3.0.5 ~ 4.0.0 버전을 요구하고 있어서 그렇다
.. environment: sdk: &amp;#39;&amp;gt;=3.0.5 &amp;lt;4.0.0&amp;#39; .. 3. 해결방법 Dart SDK를 올려주면 해결된다. VSCode Terminal에서 flutter upgrade 해주자</description>
    </item>
    
    <item>
      <title>에러 : VSCode에서 iOS Emulator가 뜨지 않을때</title>
      <link>https://sanc93.github.io/post/etc/2023-07-10-error-01/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/etc/2023-07-10-error-01/</guid>
      <description>1. 문제 iOS 에뮬레이터 실행 해보려 했는데
없다&amp;hellip;.
Resolving dependencies... The current Dart SDK version is 3.0.3. Because introduce_e1if requires SDK version &amp;gt;=3.0.5 &amp;lt;4.0.0, version solving failed. Exited (1) 2. 원인 3. 해결방법 VSCode 터미널에서
sudo xcode-select --switch /Applications/Xcode.app/Contents/Developer 을 해주자
그럼 잘~ 뜬다</description>
    </item>
    
    <item>
      <title>Flutter 01 : Flutter와 Dart의 관계</title>
      <link>https://sanc93.github.io/post/flutter/2023-07-07-flutter/</link>
      <pubDate>Fri, 07 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/flutter/2023-07-07-flutter/</guid>
      <description>앱 개발 방법은
① 네이티브 앱(Native App)
② 크로스 플랫폼 앱(Cross Platform App)
이렇게 크게 2가지로 나뉜다.
네이티브 앱(Native App)
원래 앱을 개발하던 방식. 모바일 기기는 iOS와 Android로 양분되어 있다.
네이티브로 앱을 제작하려면 안드로이드, iOS 앱을 각각의 개발 방법으로 두 번 제작 해야 함.
따라서 리소스가 많이 들어간다는 단점은 있지만 성능이 가장 빠르고 최신 기능을 빠르게 적용할 수 있다는 장점이 있다.
Android
개발 언어: Java, Kotlin
개발 툴 : Android Studio</description>
    </item>
    
    <item>
      <title>첫 글</title>
      <link>https://sanc93.github.io/post/1/</link>
      <pubDate>Mon, 19 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/1/</guid>
      <description>야호!</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sanc93.github.io/archives/</link>
      <pubDate>Tue, 28 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/archives/</guid>
      <description></description>
    </item>
    
    <item>
      <title></title>
      <link>https://sanc93.github.io/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/about/</guid>
      <description>서울 관악구 사는 30살 아재
아직 모르는 건 많지만 열심히 하면 할 수 있다!
lazy-kim.com
e-mail : sanc93@me.com</description>
    </item>
    
    <item>
      <title></title>
      <link>https://sanc93.github.io/post/swift/untitled/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://sanc93.github.io/post/swift/untitled/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
